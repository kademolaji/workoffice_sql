<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WorkOffice.Web</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "M:WorkOffice.Web.Controllers.AdministrationController.Create(WorkOffice.Contracts.Models.UserRoleAndActivityModel)" -->
        <member name="M:WorkOffice.Web.Controllers.AdministrationController.GetAllUserRoleDefinitions">
             <summary>
             Get list of UserRoleDefinitions
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>List of UserRoleDefinitions</returns>
             <response code="200">Returns list of UserRoleDefinitions</response>
             <response code="404">If list of UserRoleDefinitions is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.AdministrationController.DeleteUserRoleDefinition(System.Int64)">
             <summary>
             Delete UserRoleDefinition
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="userRoleDefinitionId"></param>
             <returns>Object of UserRoleDefinition</returns>
             <response code="200">Returns object of UserRoleDefinition</response>
             <response code="404">If object of UserRoleDefinition is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.AdministrationController.DeleteMultipleUserRoleDefinition(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple UserRoleDefinition
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of DeleteMultipleUserRoleDefinition</returns>
             <response code="200">Returns object of DeleteMultipleUserRoleDefinition</response>
             <response code="404">If object of DeleteMultipleUserRoleDefinition is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.AdministrationController.GetActivities">
             <summary>
             Get list of Activities
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>List of Activities</returns>
             <response code="200">Returns list of Activities</response>
             <response code="404">If list of Activities is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.AdministrationController.GetUserRoleAndActivities(System.Int64)">
             <summary>
             Get list of UserRoleAndActivities
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>List of UserRole And Activities</returns>
             <response code="200">Returns list of UserRole And Activities</response>
             <response code="404">If list of UserRole And Activities is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.AdministrationController.GetUserRoleDefinition(System.Int64)">
             <summary>
             Get list of UserRoleAndActivities
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>List of UserRole And Activities</returns>
             <response code="200">Returns list of UserRole And Activities</response>
             <response code="404">If list of UserRole And Activities is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.AdministrationController.GetActivitiesByRoleId(System.Int64)">
             <summary>
             Get list of Activities By RoleId
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>List of Activities By RoleId</returns>
             <response code="200">Returns list of Activities By RoleId</response>
             <response code="404">If list of Activities By RoleId is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.AppointmentsController.Create(WorkOffice.Contracts.Models.CreateAppointmentModel)">
             <summary>
             Create Appointments
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/Appointments/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">Appointments Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.AppointmentsController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of Appointments
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="options"></param>
             <returns>List of Appointments</returns>
             <response code="200">Returns list of Appointments</response>
             <response code="404">If list of Appointments is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.AppointmentsController.Get(System.Int64)">
             <summary>
             Get object of Appointments
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="appointmentId"></param>
             <returns>Object of Appointments</returns>
             <response code="200">Returns object of Appointments</response>
             <response code="404">If object of Appointments is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.AppointmentsController.Delete(System.Int64)">
             <summary>
             Delete Appointments
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="patientId"></param>
             <returns>Object of Appointments</returns>
             <response code="200">Returns object of Appointments</response>
             <response code="404">If object of Appointments is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.AppointmentsController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple Appointments
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of Appointments</returns>
             <response code="200">Returns object of Appointments</response>
             <response code="404">If object of Appointments is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.NHS.PatientDocumentController.Create(WorkOffice.Web.Dtos.PatientDocumentDto)">
             <summary>
             Create PatientDocument
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/PatientDocument/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">PatientDocument Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.NHS.PatientDocumentController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of PatientDocument
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="options"></param>
             <returns>List of PatientDocument</returns>
             <response code="200">Returns list of PatientDocument</response>
             <response code="404">If list of PatientDocument is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.NHS.PatientDocumentController.Delete(System.Int64)">
             <summary>
             Delete PatientDocument
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="patientId"></param>
             <returns>Object of PatientDocument</returns>
             <response code="200">Returns object of PatientDocument</response>
             <response code="404">If object of PatientDocument is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.NHS.PatientDocumentController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple PatientDocument
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of PatientDocument</returns>
             <response code="200">Returns object of PatientDocument</response>
             <response code="404">If object of PatientDocument is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.PatientInformationController.Create(WorkOffice.Contracts.Models.PatientInformationModel)">
             <summary>
             Create PatientInformation
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/PatientInformation/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">PatientInformation Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.PatientInformationController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of PatientInformation
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="options"></param>
             <returns>List of PatientInformation</returns>
             <response code="200">Returns list of PatientInformation</response>
             <response code="404">If list of PatientInformation is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.PatientInformationController.Get(System.Int64)">
             <summary>
             Get object of PatientInformation
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="patientId"></param>
             <returns>Object of PatientInformation</returns>
             <response code="200">Returns object of PatientInformation</response>
             <response code="404">If object of PatientInformation is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.PatientInformationController.Delete(System.Int64)">
             <summary>
             Delete PatientInformation
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="patientId"></param>
             <returns>Object of PatientInformation</returns>
             <response code="200">Returns object of PatientInformation</response>
             <response code="404">If object of PatientInformation is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.PatientInformationController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple PatientInformation
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of PatientInformation</returns>
             <response code="200">Returns object of PatientInformation</response>
             <response code="404">If object of PatientInformation is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.WaitingListController.Create(WorkOffice.Contracts.Models.WaitingListModel)">
             <summary>
             Create WaitingList
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/WaitingList/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">WaitingList Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.WaitingListController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of WaitingList
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="options"></param>
             <returns>List of WaitingList</returns>
             <response code="200">Returns list of WaitingList</response>
             <response code="404">If list of WaitingList is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.WaitingListController.Get(System.Int64)">
             <summary>
             Get object of WaitingList
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="waitinglistId"></param>
             <returns>Object of WaitingList</returns>
             <response code="200">Returns object of WaitingList</response>
             <response code="404">If object of WaitingList is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.WaitingListController.Delete(System.Int64)">
             <summary>
             Delete WaitingList
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="waitinglistId"></param>
             <returns>Object of WaitingList</returns>
             <response code="200">Returns object of WaitingList</response>
             <response code="404">If object of WaitingList is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.WaitingListController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple WaitingList
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of WaitingList</returns>
             <response code="200">Returns object of WaitingList</response>
             <response code="404">If object of WaitingList is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.ActivityController.CreateActivity(WorkOffice.Contracts.Models.NHSActivityViewModels)">
             <summary>
             Create Activity
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/Activity/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">Activity Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.ActivityController.UpdateActivity(WorkOffice.Contracts.Models.NHSActivityViewModels)">
             <summary>
             Create Activity
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/Activity/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">Activity Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.ActivityController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of Activity
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="pageNumber"></param>
             <param name="pageSize"></param>
             <returns>List of Activity</returns>
             <response code="200">Returns list of Activity</response>
             <response code="404">If list of Activity is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.ActivityController.Get(System.Int64)">
             <summary>
             Get object of Activity
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="nhsActivityId"></param>
             <returns>Object of Activity</returns>
             <response code="200">Returns object of Activity</response>
             <response code="404">If object of Activity is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.ActivityController.GenerateExportStructureDefinition">
             <summary>
             Export Activity
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of Activity</returns>
             <response code="200">Returns object of Activity</response>
             <response code="404">If object of Activity is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.ActivityController.UploadStructureDefinition(WorkOffice.Web.Utilities.UploadModel)">
             <summary>
             Upload Activity
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of Activity</returns>
             <response code="200">Returns object of Activity</response>
             <response code="404">If object of Activity is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.ActivityController.Delete(System.Int64)">
             <summary>
             Delete Activity
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="nhsActivityId"></param>
             <returns>Object of Activity</returns>
             <response code="200">Returns object of Activity</response>
             <response code="404">If object of Activity is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.ActivityController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple Activity
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of Activity</returns>
             <response code="200">Returns object of Activity</response>
             <response code="404">If object of Activity is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.AppTypeController.CreateAppType(WorkOffice.Contracts.Models.AppTypeViewModels)">
             <summary>
             Create AppType
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/AppType/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">AppType Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.AppTypeController.UpdateAppType(WorkOffice.Contracts.Models.AppTypeViewModels)">
             <summary>
             Create AppType
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/AppType/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">AppType Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.AppTypeController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of AppType
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="pageNumber"></param>
             <param name="pageSize"></param>
             <returns>List of AppType</returns>
             <response code="200">Returns list of AppType</response>
             <response code="404">If list of AppType is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.AppTypeController.Get(System.Int64)">
             <summary>
             Get object of AppType
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="appTypeId"></param>
             <returns>Object of AppType</returns>
             <response code="200">Returns object of AppType</response>
             <response code="404">If object of AppType is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.AppTypeController.GenerateExportStructureDefinition">
             <summary>
             Export AppType
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of AppType</returns>
             <response code="200">Returns object of AppType</response>
             <response code="404">If object of AppType is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.AppTypeController.UploadStructureDefinition(WorkOffice.Web.Utilities.UploadModel)">
             <summary>
             Upload AppType
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of AppType</returns>
             <response code="200">Returns object of AppType</response>
             <response code="404">If object of AppType is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.AppTypeController.Delete(System.Int64)">
             <summary>
             Delete AppType
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="appTypeId"></param>
             <returns>Object of AppType</returns>
             <response code="200">Returns object of AppType</response>
             <response code="404">If object of AppType is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.AppTypeController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple AppType
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of AppType</returns>
             <response code="200">Returns object of AppType</response>
             <response code="404">If object of AppType is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.ConsultantController.CreateConsultant(WorkOffice.Contracts.Models.ConsultantViewModels)">
             <summary>
             Create Consultant
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/Consultant/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">Consultant Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.ConsultantController.UpdateConsultant(WorkOffice.Contracts.Models.ConsultantViewModels)">
             <summary>
             Create Consultant
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/Consultant/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">Consultant Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.ConsultantController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of Consultant
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="pageNumber"></param>
             <param name="pageSize"></param>
             <returns>List of Consultant</returns>
             <response code="200">Returns list of Consultant</response>
             <response code="404">If list of Consultant is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.ConsultantController.Get(System.Int64)">
             <summary>
             Get object of Consultant
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="consultantId"></param>
             <returns>Object of Consultant</returns>
             <response code="200">Returns object of Consultant</response>
             <response code="404">If object of Consultant is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.ConsultantController.GenerateExportStructureDefinition">
             <summary>
             Export Consultant
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of Consultant</returns>
             <response code="200">Returns object of Consultant</response>
             <response code="404">If object of Consultant is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.ConsultantController.UploadStructureDefinition(WorkOffice.Web.Utilities.UploadModel)">
             <summary>
             Upload Consultant
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of Consultant</returns>
             <response code="200">Returns object of Consultant</response>
             <response code="404">If object of Consultant is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.ConsultantController.Delete(System.Int64)">
             <summary>
             Delete Consultant
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="consultantId"></param>
             <returns>Object of Consultant</returns>
             <response code="200">Returns object of Consultant</response>
             <response code="404">If object of Consultant is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.ConsultantController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple Consultant
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of Consultant</returns>
             <response code="200">Returns object of Consultant</response>
             <response code="404">If object of Consultant is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.HospitalController.CreateHospital(WorkOffice.Contracts.Models.HospitalViewModels)">
             <summary>
             Create Hospital
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/Hospital/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">Hospital Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.HospitalController.UpdateHospital(WorkOffice.Contracts.Models.HospitalViewModels)">
             <summary>
             Create Hospital
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/Hospital/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">Hospital Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.HospitalController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of Hospital
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="pageNumber"></param>
             <param name="pageSize"></param>
             <returns>List of Hospital</returns>
             <response code="200">Returns list of Hospital</response>
             <response code="404">If list of Hospital is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.HospitalController.Get(System.Int64)">
             <summary>
             Get object of Hospital
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="hospitalId"></param>
             <returns>Object of Hospital</returns>
             <response code="200">Returns object of Hospital</response>
             <response code="404">If object of Hospital is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.HospitalController.GenerateExportStructureDefinition">
             <summary>
             Export Hospital
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of Hospital</returns>
             <response code="200">Returns object of Hospital</response>
             <response code="404">If object of Hospital is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.HospitalController.UploadStructureDefinition(WorkOffice.Web.Utilities.UploadModel)">
             <summary>
             Upload Hospital
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of Hospital</returns>
             <response code="200">Returns object of Hospital</response>
             <response code="404">If object of Hospital is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.HospitalController.Delete(System.Int64)">
             <summary>
             Delete Hospital
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="hospitalId"></param>
             <returns>Object of Hospital</returns>
             <response code="200">Returns object of Hospital</response>
             <response code="404">If object of Hospital is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.HospitalController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple Hospital
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of Hospital</returns>
             <response code="200">Returns object of Hospital</response>
             <response code="404">If object of Hospital is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.PathwayStatusController.CreatePathwayStatus(WorkOffice.Contracts.Models.PathwayStatusViewModels)">
             <summary>
             Create PathwayStatus
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/PathwayStatus/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">PathwayStatus Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.PathwayStatusController.UpdatePathwayStatus(WorkOffice.Contracts.Models.PathwayStatusViewModels)">
             <summary>
             Create PathwayStatus
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/PathwayStatus/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">PathwayStatus Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.PathwayStatusController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of PathwayStatus
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="pageNumber"></param>
             <param name="pageSize"></param>
             <returns>List of PathwayStatus</returns>
             <response code="200">Returns list of PathwayStatus</response>
             <response code="404">If list of PathwayStatus is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.PathwayStatusController.Get(System.Int64)">
             <summary>
             Get object of PathwayStatus
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="pathwayStatusId"></param>
             <returns>Object of PathwayStatus</returns>
             <response code="200">Returns object of PathwayStatus</response>
             <response code="404">If object of PathwayStatus is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.PathwayStatusController.GenerateExportStructureDefinition">
             <summary>
             Export PathwayStatus
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of PathwayStatus</returns>
             <response code="200">Returns object of PathwayStatus</response>
             <response code="404">If object of PathwayStatus is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.PathwayStatusController.UploadStructureDefinition(WorkOffice.Web.Utilities.UploadModel)">
             <summary>
             Upload PathwayStatus
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of PathwayStatus</returns>
             <response code="200">Returns object of PathwayStatus</response>
             <response code="404">If object of PathwayStatus is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.PathwayStatusController.Delete(System.Int64)">
             <summary>
             Delete PathwayStatus
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="pathwayStatusId"></param>
             <returns>Object of PathwayStatus</returns>
             <response code="200">Returns object of PathwayStatus</response>
             <response code="404">If object of PathwayStatus is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.PathwayStatusController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple PathwayStatus
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of PathwayStatus</returns>
             <response code="200">Returns object of PathwayStatus</response>
             <response code="404">If object of PathwayStatus is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.RTTController.CreateRTT(WorkOffice.Contracts.Models.RTTViewModels)">
             <summary>
             Create RTT
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/RTT/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">RTT Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.RTTController.UpdateRTT(WorkOffice.Contracts.Models.RTTViewModels)">
             <summary>
             Create RTT
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/RTT/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">RTT Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.RTTController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of RTT
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="pageNumber"></param>
             <param name="pageSize"></param>
             <returns>List of RTT</returns>
             <response code="200">Returns list of RTT</response>
             <response code="404">If list of RTT is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.RTTController.Get(System.Int64)">
             <summary>
             Get object of RTT
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="rttId"></param>
             <returns>Object of RTT</returns>
             <response code="200">Returns object of RTT</response>
             <response code="404">If object of RTT is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.RTTController.GenerateExportStructureDefinition">
             <summary>
             Export RTT
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of RTT</returns>
             <response code="200">Returns object of RTT</response>
             <response code="404">If object of RTT is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.RTTController.UploadStructureDefinition(WorkOffice.Web.Utilities.UploadModel)">
             <summary>
             Upload RTT
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of RTT</returns>
             <response code="200">Returns object of RTT</response>
             <response code="404">If object of RTT is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.RTTController.Delete(System.Int64)">
             <summary>
             Delete RTT
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="rttId"></param>
             <returns>Object of RTT</returns>
             <response code="200">Returns object of RTT</response>
             <response code="404">If object of RTT is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.RTTController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple RTT
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of RTT</returns>
             <response code="200">Returns object of RTT</response>
             <response code="404">If object of RTT is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.SpecialtyController.CreateSpecialty(WorkOffice.Contracts.Models.SpecialtyViewModels)">
             <summary>
             Create Specialty
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/Specialty/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">Specialty Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.SpecialtyController.UpdateSpecialty(WorkOffice.Contracts.Models.SpecialtyViewModels)">
             <summary>
             Create Specialty
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/Specialty/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">Specialty Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.SpecialtyController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of Specialty
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="pageNumber"></param>
             <param name="pageSize"></param>
             <returns>List of Specialty</returns>
             <response code="200">Returns list of Specialty</response>
             <response code="404">If list of Specialty is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.SpecialtyController.Get(System.Int64)">
             <summary>
             Get object of Specialty
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="specialtyId"></param>
             <returns>Object of Specialty</returns>
             <response code="200">Returns object of Specialty</response>
             <response code="404">If object of Specialty is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.SpecialtyController.GenerateExportStructureDefinition">
             <summary>
             Export Specialty
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of Specialty</returns>
             <response code="200">Returns object of Specialty</response>
             <response code="404">If object of Specialty is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.SpecialtyController.UploadStructureDefinition(WorkOffice.Web.Utilities.UploadModel)">
             <summary>
             Upload Specialty
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of Specialty</returns>
             <response code="200">Returns object of Specialty</response>
             <response code="404">If object of Specialty is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.SpecialtyController.Delete(System.Int64)">
             <summary>
             Delete Specialty
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="specialtyId"></param>
             <returns>Object of Specialty</returns>
             <response code="200">Returns object of Specialty</response>
             <response code="404">If object of Specialty is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.SpecialtyController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple Specialty
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of Specialty</returns>
             <response code="200">Returns object of Specialty</response>
             <response code="404">If object of Specialty is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.WaitingTypeController.CreateWaitingType(WorkOffice.Contracts.Models.WaitingTypeViewModels)">
             <summary>
             Create WaitingType
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/WaitingType/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">WaitingType Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.WaitingTypeController.UpdateWaitingType(WorkOffice.Contracts.Models.WaitingTypeViewModels)">
             <summary>
             Create WaitingType
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/WaitingType/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">WaitingType Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.WaitingTypeController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of WaitingType
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="pageNumber"></param>
             <param name="pageSize"></param>
             <returns>List of WaitingType</returns>
             <response code="200">Returns list of WaitingType</response>
             <response code="404">If list of WaitingType is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.WaitingTypeController.Get(System.Int64)">
             <summary>
             Get object of WaitingType
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="waitingTypeId"></param>
             <returns>Object of WaitingType</returns>
             <response code="200">Returns object of WaitingType</response>
             <response code="404">If object of WaitingType is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.WaitingTypeController.GenerateExportStructureDefinition">
             <summary>
             Export WaitingType
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of WaitingType</returns>
             <response code="200">Returns object of WaitingType</response>
             <response code="404">If object of WaitingType is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.WaitingTypeController.UploadStructureDefinition(WorkOffice.Web.Utilities.UploadModel)">
             <summary>
             Upload WaitingType
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of WaitingType</returns>
             <response code="200">Returns object of WaitingType</response>
             <response code="404">If object of WaitingType is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.WaitingTypeController.Delete(System.Int64)">
             <summary>
             Delete WaitingType
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="waitingTypeId"></param>
             <returns>Object of WaitingType</returns>
             <response code="200">Returns object of WaitingType</response>
             <response code="404">If object of WaitingType is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.WaitingTypeController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple WaitingType
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of WaitingType</returns>
             <response code="200">Returns object of WaitingType</response>
             <response code="404">If object of WaitingType is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.WardController.CreateWard(WorkOffice.Contracts.Models.WardViewModels)">
             <summary>
             Create Ward
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/Ward/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">Ward Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.WardController.UpdateWard(WorkOffice.Contracts.Models.WardViewModels)">
             <summary>
             Create Ward
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/Ward/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">Ward Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.WardController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of Ward
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="pageNumber"></param>
             <param name="pageSize"></param>
             <returns>List of Ward</returns>
             <response code="200">Returns list of Ward</response>
             <response code="404">If list of Ward is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.WardController.Get(System.Int64)">
             <summary>
             Get object of Ward
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="wardId"></param>
             <returns>Object of Ward</returns>
             <response code="200">Returns object of Ward</response>
             <response code="404">If object of Ward is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.WardController.GenerateExportStructureDefinition">
             <summary>
             Export Ward
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of Ward</returns>
             <response code="200">Returns object of Ward</response>
             <response code="404">If object of Ward is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.WardController.UploadStructureDefinition(WorkOffice.Web.Utilities.UploadModel)">
             <summary>
             Upload Ward
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of Ward</returns>
             <response code="200">Returns object of Ward</response>
             <response code="404">If object of Ward is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.WardController.Delete(System.Int64)">
             <summary>
             Delete Ward
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="wardId"></param>
             <returns>Object of Ward</returns>
             <response code="200">Returns object of Ward</response>
             <response code="404">If object of Ward is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.WardController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple Ward
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of Ward</returns>
             <response code="200">Returns object of Ward</response>
             <response code="404">If object of Ward is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.CompanyStructureController.Create(WorkOffice.Contracts.Models.CompanyStructureModel)">
             <summary>
             Create CompanyStructure
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/CompanyStructure/Create
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">CompanyStructure Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.CompanyStructureController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of CompanyStructure
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="options"></param>
             <returns>List of CompanyStructure</returns>
             <response code="200">Returns list of CompanyStructure</response>
             <response code="404">If list of CompanyStructure is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.CompanyStructureController.Get(System.Int64)">
             <summary>
             Get object of CompanyStructure
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="companyStructureId"></param>
             <returns>Object of CompanyStructure</returns>
             <response code="200">Returns object of CompanyStructure</response>
             <response code="404">If object of CompanyStructure is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.CompanyStructureController.Export">
             <summary>
             Export CompanyStructure
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of CompanyStructure</returns>
             <response code="200">Returns object of CompanyStructure</response>
             <response code="404">If object of CompanyStructure is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.CompanyStructureController.Upload(WorkOffice.Web.Utilities.UploadModel)">
             <summary>
             Upload CompanyStructure
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of CompanyStructure</returns>
             <response code="200">Returns object of CompanyStructure</response>
             <response code="404">If object of CompanyStructure is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.CompanyStructureController.Delete(System.Int64)">
             <summary>
             Delete CompanyStructure
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="companyStructureId"></param>
             <returns>Object of CompanyStructure</returns>
             <response code="200">Returns object of CompanyStructure</response>
             <response code="404">If object of CompanyStructure is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.CompanyStructureController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple CompanyStructure
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of CompanyStructure</returns>
             <response code="200">Returns object of CompanyStructure</response>
             <response code="404">If object of CompanyStructure is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.CustomIdentityFormatSettingController.Create(WorkOffice.Contracts.Models.CustomIdentityFormatSettingModel)">
             <summary>
             Create customIdentityFormatSetting
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/customIdentityFormatSetting/Create
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">customIdentityFormatSetting Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:WorkOffice.Web.Controllers.CustomIdentityFormatSettingController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of customIdentityFormatSetting
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="options"></param>
             <returns>List of customIdentityFormatSetting</returns>
             <response code="200">Returns list of customIdentityFormatSetting</response>
             <response code="404">If list of customIdentityFormatSetting is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.CustomIdentityFormatSettingController.Get(System.Int64)">
             <summary>
             Get object of customIdentityFormatSetting
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="customIdentityFormatSettingId"></param>
             <returns>Object of customIdentityFormatSetting</returns>
             <response code="200">Returns object of customIdentityFormatSetting</response>
             <response code="404">If object of customIdentityFormatSetting is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.CustomIdentityFormatSettingController.Delete(System.Int64)">
             <summary>
             Delete customIdentityFormatSetting
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="customIdentityFormatSettingId"></param>
             <returns>Object of customIdentityFormatSetting</returns>
             <response code="200">Returns object of customIdentityFormatSetting</response>
             <response code="404">If object of customIdentityFormatSetting is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:WorkOffice.Web.Controllers.CustomIdentityFormatSettingController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple StructureDefinition
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of StructureDefinition</returns>
             <response code="200">Returns object of StructureDefinition</response>
             <response code="404">If object of StructureDefinition is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="P:WorkOffice.Web.Utilities.JwtIssuerOptions.Issuer">
            <summary>
            "iss" (Issuer) Claim
            </summary>
            <remarks>The "iss" (issuer) claim identifies the principal that issued the
              JWT.  The processing of this claim is generally application specific.
              The "iss" value is a case-sensitive string containing a StringOrURI
              value.  Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:WorkOffice.Web.Utilities.JwtIssuerOptions.Subject">
            <summary>
            "sub" (Subject) Claim
            </summary>
            <remarks> The "sub" (subject) claim identifies the principal that is the
              subject of the JWT.  The claims in a JWT are normally statements
              about the subject.  The subject value MUST either be scoped to be
              locally unique in the context of the issuer or be globally unique.
              The processing of this claim is generally application specific.  The
              "sub" value is a case-sensitive string containing a StringOrURI
              value.  Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:WorkOffice.Web.Utilities.JwtIssuerOptions.Audience">
            <summary>
            "aud" (Audience) Claim
            </summary>
            <remarks>The "aud" (audience) claim identifies the recipients that the JWT is
              intended for.  Each principal intended to process the JWT MUST
              identify itself with a value in the audience claim.  If the principal
              processing the claim does not identify itself with a value in the
              "aud" claim when this claim is present, then the JWT MUST be
              rejected.  In the general case, the "aud" value is an array of case-
              sensitive strings, each containing a StringOrURI value.  In the
              special case when the JWT has one audience, the "aud" value MAY be a
              single case-sensitive string containing a StringOrURI value.  The
              interpretation of audience values is generally application specific.
              Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:WorkOffice.Web.Utilities.JwtIssuerOptions.NotBefore">
            <summary>
            "nbf" (Not Before) Claim (default is UTC NOW)
            </summary>
            <remarks>The "nbf" (not before) claim identifies the time before which the JWT
              MUST NOT be accepted for processing.  The processing of the "nbf"
              claim requires that the current date/time MUST be after or equal to
              the not-before date/time listed in the "nbf" claim.  Implementers MAY
              provide for some small leeway, usually no more than a few minutes, to
              account for clock skew.  Its value MUST be a number containing a
              NumericDate value.  Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:WorkOffice.Web.Utilities.JwtIssuerOptions.IssuedAt">
            <summary>
            "iat" (Issued At) Claim (default is UTC NOW)
            </summary>
            <remarks>The "iat" (issued at) claim identifies the time at which the JWT was
              issued.  This claim can be used to determine the age of the JWT.  Its
              value MUST be a number containing a NumericDate value.  Use of this
              claim is OPTIONAL.</remarks>
        </member>
        <member name="P:WorkOffice.Web.Utilities.JwtIssuerOptions.ValidFor">
            <summary>
            Set the timespan the token will be valid for (default is 5 min/300 seconds)
            </summary>
        </member>
        <member name="P:WorkOffice.Web.Utilities.JwtIssuerOptions.Expiration">
            <summary>
            "exp" (Expiration Time) Claim (returns IssuedAt + ValidFor)
            </summary>
            <remarks>The "exp" (expiration time) claim identifies the expiration time on
              or after which the JWT MUST NOT be accepted for processing.  The
              processing of the "exp" claim requires that the current date/time
              MUST be before the expiration date/time listed in the "exp" claim.
              Implementers MAY provide for some small leeway, usually no more than
              a few minutes, to account for clock skew.  Its value MUST be a number
              containing a NumericDate value.  Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:WorkOffice.Web.Utilities.JwtIssuerOptions.JtiGenerator">
            <summary>
            "jti" (JWT ID) Claim (default ID is a GUID)
            </summary>
            <remarks>The "jti" (JWT ID) claim provides a unique identifier for the JWT.
              The identifier value MUST be assigned in a manner that ensures that
              there is a negligible probability that the same value will be
              accidentally assigned to a different data object; if the application
              uses multiple issuers, collisions MUST be prevented among values
              produced by different issuers as well.  The "jti" claim can be used
              to prevent the JWT from being replayed.  The "jti" value is a case-
              sensitive string.  Use of this claim is OPTIONAL.</remarks>
        </member>
        <member name="P:WorkOffice.Web.Utilities.JwtIssuerOptions.SigningCredentials">
            <summary>
            The signing key to use when generating tokens.
            </summary>
        </member>
        <member name="M:H2RHRMS.Api.Controllers.GeneralInformationController.Create(WorkOffice.Contracts.Models.GeneralInformationModel)">
             <summary>
             Create GeneralInformation
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/GeneralInformation/Create
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">GeneralInformation Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:H2RHRMS.Api.Controllers.GeneralInformationController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of GeneralInformation
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="options"></param>
             <returns>List of customIdentityFormatSetting</returns>
             <response code="200">Returns list of GeneralInformation</response>
             <response code="404">If list of GeneralInformation is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:H2RHRMS.Api.Controllers.GeneralInformationController.Get(System.Int64)">
             <summary>
             Get object of GeneralInformation
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="generalInformationId"></param>
             <returns>Object of GeneralInformation</returns>
             <response code="200">Returns object of GeneralInformation</response>
             <response code="404">If object of GeneralInformation is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:H2RHRMS.Api.Controllers.GeneralInformationController.Delete(System.Int64)">
             <summary>
             Delete GeneralInformation
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="generalInformationId"></param>
             <returns>Object of GeneralInformation</returns>
             <response code="200">Returns object of GeneralInformation</response>
             <response code="404">If object of GeneralInformation is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:H2RHRMS.Api.Controllers.GeneralInformationController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple StructureDefinition
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of StructureDefinition</returns>
             <response code="200">Returns object of StructureDefinition</response>
             <response code="404">If object of StructureDefinition is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:H2RHRMS.Api.Controllers.LocationController.Create(WorkOffice.Contracts.Models.LocationModel)">
             <summary>
             Create Location
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/Location/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">Location Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:H2RHRMS.Api.Controllers.LocationController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of Location
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="options"></param>
             <returns>List of Location</returns>
             <response code="200">Returns list of Location</response>
             <response code="404">If list of Location is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:H2RHRMS.Api.Controllers.LocationController.Get(System.Int64)">
             <summary>
             Get object of Location
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="locationId"></param>
             <returns>Object of Location</returns>
             <response code="200">Returns object of Location</response>
             <response code="404">If object of Location is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:H2RHRMS.Api.Controllers.LocationController.GenerateExportStructureDefinition">
             <summary>
             Export Location
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of Location</returns>
             <response code="200">Returns object of Location</response>
             <response code="404">If object of Location is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:H2RHRMS.Api.Controllers.LocationController.UploadStructureDefinition(WorkOffice.Web.Utilities.UploadModel)">
             <summary>
             Upload Location
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of Location</returns>
             <response code="200">Returns object of Location</response>
             <response code="404">If object of Location is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:H2RHRMS.Api.Controllers.LocationController.Delete(System.Int64)">
             <summary>
             Delete Location
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="locationId"></param>
             <returns>Object of Location</returns>
             <response code="200">Returns object of Location</response>
             <response code="404">If object of Location is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:H2RHRMS.Api.Controllers.LocationController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple Location
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of Location</returns>
             <response code="200">Returns object of Location</response>
             <response code="404">If object of Location is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:H2RHRMS.Api.Controllers.StructureDefinitionController.Create(WorkOffice.Contracts.Models.StructureDefinitionModel)">
             <summary>
             Create StructureDefinition
             </summary>
             <remarks>
             Sample request:
            
                 POST /api/StructureDefinition/Create
                 {
                   "revenueId": 10,
                   "customerId": 210
                     }
            
             </remarks>
             <param name="model"></param>
             <returns>Created success message </returns>
             <response code="201">StructureDefinition Created Successfully</response>
             <response code="400">If an error occur or invalid request payload</response>
        </member>
        <member name="M:H2RHRMS.Api.Controllers.StructureDefinitionController.GetList(WorkOffice.Contracts.ServicesContracts.SearchCall{WorkOffice.Contracts.ServicesContracts.SearchParameter})">
             <summary>
             Get list of StructureDefinition
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="options"></param>
             <returns>List of StructureDefinition</returns>
             <response code="200">Returns list of StructureDefinition</response>
             <response code="404">If list of StructureDefinition is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:H2RHRMS.Api.Controllers.StructureDefinitionController.Get(System.Int64)">
             <summary>
             Get object of StructureDefinition
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="structureDefinitionId"></param>
             <returns>Object of StructureDefinition</returns>
             <response code="200">Returns object of StructureDefinition</response>
             <response code="404">If object of StructureDefinition is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:H2RHRMS.Api.Controllers.StructureDefinitionController.GenerateExportStructureDefinition">
             <summary>
             Export StructureDefinition
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of StructureDefinition</returns>
             <response code="200">Returns object of StructureDefinition</response>
             <response code="404">If object of StructureDefinition is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:H2RHRMS.Api.Controllers.StructureDefinitionController.UploadStructureDefinition(WorkOffice.Web.Utilities.UploadModel)">
             <summary>
             Upload StructureDefinition
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <returns>Object of StructureDefinition</returns>
             <response code="200">Returns object of StructureDefinition</response>
             <response code="404">If object of StructureDefinition is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:H2RHRMS.Api.Controllers.StructureDefinitionController.Delete(System.Int64)">
             <summary>
             Delete StructureDefinition
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="structureDefinitionId"></param>
             <returns>Object of StructureDefinition</returns>
             <response code="200">Returns object of StructureDefinition</response>
             <response code="404">If object of StructureDefinition is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
        <member name="M:H2RHRMS.Api.Controllers.StructureDefinitionController.MultipleDelete(WorkOffice.Contracts.Models.MultipleDeleteModel)">
             <summary>
             Delete Multiple StructureDefinition
             </summary>
             <remarks>
             Sample request:
            
             </remarks>
             <param name="model"></param>
             <returns>Object of StructureDefinition</returns>
             <response code="200">Returns object of StructureDefinition</response>
             <response code="404">If object of StructureDefinition is null</response> 
             <response code="400">If an error occur or invalid request payload</response> 
        </member>
    </members>
</doc>
