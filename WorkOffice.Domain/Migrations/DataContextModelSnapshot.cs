// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkOffice.Domain.Helpers;

namespace WorkOffice.Domain.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("WorkOffice.Domain.Entities.AppType", b =>
                {
                    b.Property<long>("AppTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("AppTypeId");

                    b.HasIndex("AppTypeId");

                    b.ToTable("AppTypes");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.AuditTrail", b =>
                {
                    b.Property<long>("AuditTrailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ActionBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ActionType")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Details")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("HostAddress")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("IPAddress")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Page")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("AuditTrailId");

                    b.HasIndex("AuditTrailId");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.CompanyStructure", b =>
                {
                    b.Property<long>("CompanyStructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Company")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CompanyHead")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ContactEmail")
                        .HasColumnType("text");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Parent")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<long?>("ParentID")
                        .HasColumnType("bigint");

                    b.Property<long?>("StructureDefinitionId")
                        .HasColumnType("bigint");

                    b.Property<long>("StructureTypeID")
                        .HasColumnType("bigint")
                        .HasMaxLength(50);

                    b.HasKey("CompanyStructureId");

                    b.HasIndex("CompanyStructureId");

                    b.HasIndex("StructureDefinitionId");

                    b.ToTable("CompanyStructures");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.Consultant", b =>
                {
                    b.Property<long>("ConsultantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("NHS_ReferralReferralId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ConsultantId");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("NHS_ReferralReferralId");

                    b.ToTable("Consultants");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAfrica")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("CountryId");

                    b.HasIndex("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.CustomIdentityFormatSetting", b =>
                {
                    b.Property<long>("CustomIdentityFormatSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Activity")
                        .HasColumnType("text");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Digits")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<string>("Separator")
                        .HasColumnType("text");

                    b.Property<string>("Suffix")
                        .HasColumnType("text");

                    b.HasKey("CustomIdentityFormatSettingId");

                    b.HasIndex("CustomIdentityFormatSettingId");

                    b.ToTable("CustomIdentityFormatSettings");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.Department", b =>
                {
                    b.Property<long>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.GeneralInformation", b =>
                {
                    b.Property<long>("GeneralInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .HasColumnType("text");

                    b.Property<byte[]>("ImgLogo")
                        .HasColumnType("bytea");

                    b.Property<string>("Imgtype")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Ismulticompany")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Organisationname")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Regno")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<int>("Subsidiary_level")
                        .HasColumnType("integer");

                    b.Property<string>("Taxid")
                        .HasColumnType("text");

                    b.Property<string>("Zipcode")
                        .HasColumnType("text");

                    b.HasKey("GeneralInformationId");

                    b.HasIndex("GeneralInformationId");

                    b.ToTable("GeneralInformations");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.Hospital", b =>
                {
                    b.Property<long>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("HospitalId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.Location", b =>
                {
                    b.Property<long>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Fax")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.NHSActivity", b =>
                {
                    b.Property<long>("NHSActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("NHSActivityId");

                    b.HasIndex("NHSActivityId");

                    b.ToTable("NHSActivities");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.NHS_Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("AppDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AppTime")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("AppTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("AppointmentStatus")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("BookDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("HospitalId")
                        .HasColumnType("integer");

                    b.Property<int?>("NHS_PatientPatientId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientValidationId")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecialtyId")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("WardId")
                        .HasColumnType("integer");

                    b.HasKey("AppointmentId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("NHS_PatientPatientId");

                    b.ToTable("NHS_Appointments");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.NHS_Diagnostic", b =>
                {
                    b.Property<int>("DiagnosticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ConsultantName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DTD")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("character varying(550)")
                        .HasMaxLength(550);

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("DiagnosticId");

                    b.HasIndex("DiagnosticId");

                    b.ToTable("NHS_Diagnostics");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.NHS_DiagnosticResult", b =>
                {
                    b.Property<int>("DiagnosticResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ConsultantName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUploaded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("DiagnosticId")
                        .HasColumnType("integer");

                    b.Property<string>("DocumentExtension")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("DocumentFile")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("Problem")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("SpecialityId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TestResultDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("DiagnosticResultId");

                    b.HasIndex("DiagnosticResultId");

                    b.ToTable("NHS_DiagnosticResults");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.NHS_Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Address")
                        .HasColumnType("character varying(550)")
                        .HasMaxLength(550);

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("DistrictNumber")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("MiddleName")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("NHSNumber")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("NHS_DiagnosticDiagnosticId")
                        .HasColumnType("integer");

                    b.Property<int?>("NHS_ReferralReferralId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PostalCode")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Sex")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("PatientId");

                    b.HasIndex("NHS_DiagnosticDiagnosticId");

                    b.HasIndex("NHS_ReferralReferralId");

                    b.HasIndex("PatientId");

                    b.ToTable("NHS_Patients");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.NHS_Patient_Validation", b =>
                {
                    b.Property<int>("PatientValidationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("DistrictNumber")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NHSNumber")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PathWayCondition")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime?>("PathWayEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PathWayNumber")
                        .IsRequired()
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("PathWayStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PathWayStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("RTTId")
                        .HasColumnType("integer")
                        .HasMaxLength(50);

                    b.Property<string>("RTTWait")
                        .HasColumnType("character varying(550)")
                        .HasMaxLength(550);

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("PatientValidationId");

                    b.HasIndex("PatientValidationId");

                    b.ToTable("NHS_Patient_Validations");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.NHS_Patient_Validation_Detail", b =>
                {
                    b.Property<int>("PatientValidationDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Activity")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PathWayStatusId")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientValidationId")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecialtyId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("PatientValidationDetailsId");

                    b.HasIndex("PatientValidationDetailsId");

                    b.ToTable("NHS_Patient_Validation_Details");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.NHS_Patientdocument", b =>
                {
                    b.Property<int>("PatientDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ClinicDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUploaded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("DocumentExtension")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("DocumentFile")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("PhysicalLocation")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("SpecialtyId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("PatientDocumentId");

                    b.HasIndex("PatientDocumentId");

                    b.ToTable("NHS_Patientdocuments");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.NHS_Referral", b =>
                {
                    b.Property<int>("ReferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("integer");

                    b.Property<string>("ConsultantName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("DocumentExtension")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("DocumentFile")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("DocumentName")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReferralDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ReferralId");

                    b.HasIndex("ReferralId");

                    b.ToTable("NHS_Referrals");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.NHS_Waitinglist", b =>
                {
                    b.Property<int>("WaitinglistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("NHS_PatientPatientId")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TCIDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("WaitTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("WaitinglistDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("WaitinglistStatus")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WaitinglistTime")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("patientValidationId")
                        .HasColumnType("integer");

                    b.HasKey("WaitinglistId");

                    b.HasIndex("NHS_PatientPatientId");

                    b.HasIndex("WaitinglistId");

                    b.ToTable("NHS_Waitinglists");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.Notification", b =>
                {
                    b.Property<long>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.PathWayStatus", b =>
                {
                    b.Property<long>("PathWayStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AllowClosed")
                        .HasColumnType("boolean");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("PathWayStatusId");

                    b.HasIndex("PathWayStatusId");

                    b.ToTable("PathWayStatuses");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.RTT", b =>
                {
                    b.Property<long>("RTTId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("RTTId");

                    b.HasIndex("RTTId");

                    b.ToTable("RTTs");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.Specialty", b =>
                {
                    b.Property<long>("SpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("NHS_DiagnosticDiagnosticId")
                        .HasColumnType("integer");

                    b.Property<int?>("NHS_ReferralReferralId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SpecialtyId");

                    b.HasIndex("NHS_DiagnosticDiagnosticId");

                    b.HasIndex("NHS_ReferralReferralId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.State", b =>
                {
                    b.Property<long>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.StructureDefinition", b =>
                {
                    b.Property<long>("StructureDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Definition")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("StructureDefinitionId");

                    b.HasIndex("StructureDefinitionId");

                    b.ToTable("StructureDefinitions");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.UserAccess", b =>
                {
                    b.Property<long>("UserAccessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyStructureId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("UserAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("UserAccessId");

                    b.HasIndex("CompanyStructureId");

                    b.HasIndex("UserAccessId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserAccesses");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.UserAccount", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AcceptTerms")
                        .HasColumnType("boolean");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int?>("Accesslevel")
                        .HasColumnType("integer");

                    b.Property<string>("Biography")
                        .HasColumnType("text");

                    b.Property<bool?>("CanChangePassword")
                        .HasColumnType("boolean");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CurrentLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomUserCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool?>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirstLoginAttempt")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActive")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("NextPasswordChangeDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool?>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.Property<string>("ResetToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityAnswer")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("SecurityQuestion")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId");

                    b.HasIndex("Email");

                    b.HasIndex("UserId");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.UserAccountAdditionalActivity", b =>
                {
                    b.Property<long>("UserAccountAdditionalActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("CanAdd")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CanApprove")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CanDelete")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CanEdit")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CanView")
                        .HasColumnType("boolean");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("UserAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserActivityId")
                        .HasColumnType("bigint");

                    b.HasKey("UserAccountAdditionalActivityId");

                    b.HasIndex("UserAccountAdditionalActivityId");

                    b.HasIndex("UserAccountId");

                    b.HasIndex("UserActivityId");

                    b.ToTable("UserAccountAdditionalActivities");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.UserAccountRole", b =>
                {
                    b.Property<long>("UserAccountRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("UserAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserRoleDefinitionId")
                        .HasColumnType("bigint");

                    b.HasKey("UserAccountRoleId");

                    b.HasIndex("UserAccountId");

                    b.HasIndex("UserAccountRoleId");

                    b.HasIndex("UserRoleDefinitionId");

                    b.ToTable("UserAccountRoles");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.UserAccountSettings", b =>
                {
                    b.Property<long>("UserAccountSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AllowPasswordUserAfter")
                        .HasColumnType("integer");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EnablePasswordReset")
                        .HasColumnType("boolean");

                    b.Property<int?>("ExpirePasswordAfter")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxPeriodOfUserInactivity")
                        .HasColumnType("integer");

                    b.Property<int?>("MaximumInvalidPasswordAttempts")
                        .HasColumnType("integer");

                    b.Property<int?>("MinimumRequiredPasswordLength")
                        .HasColumnType("integer");

                    b.Property<int?>("SessionTimeout")
                        .HasColumnType("integer");

                    b.HasKey("UserAccountSettingsId");

                    b.HasIndex("UserAccountSettingsId");

                    b.ToTable("UserAccountSettings");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.UserActivity", b =>
                {
                    b.Property<long>("UserActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UserActivityName")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<long>("UserActivityParentId")
                        .HasColumnType("bigint");

                    b.HasKey("UserActivityId");

                    b.HasIndex("UserActivityId");

                    b.HasIndex("UserActivityParentId");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.UserActivityParent", b =>
                {
                    b.Property<long>("UserActivityParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UserActivityParentName")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("UserActivityParentId");

                    b.HasIndex("UserActivityParentId");

                    b.ToTable("UserActivityParents");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.UserRoleActivity", b =>
                {
                    b.Property<long>("UserRoleActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("CanAdd")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CanApprove")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CanDelete")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CanEdit")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CanView")
                        .HasColumnType("boolean");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("UserActivityId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserRoleDefinitionId")
                        .HasColumnType("bigint");

                    b.HasKey("UserRoleActivityId");

                    b.HasIndex("UserActivityId");

                    b.HasIndex("UserRoleActivityId");

                    b.HasIndex("UserRoleDefinitionId");

                    b.ToTable("UserRoleActivities");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.UserRoleDefinition", b =>
                {
                    b.Property<long>("UserRoleDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("UserRoleDefinitionId");

                    b.HasIndex("UserRoleDefinitionId");

                    b.ToTable("UserRoleDefinitions");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.WaitingType", b =>
                {
                    b.Property<long>("WaitingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("WaitingTypeId");

                    b.HasIndex("WaitingTypeId");

                    b.ToTable("WaitingTypes");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.Ward", b =>
                {
                    b.Property<long>("WardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("WardId");

                    b.HasIndex("WardId");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.CompanyStructure", b =>
                {
                    b.HasOne("WorkOffice.Domain.Entities.StructureDefinition", null)
                        .WithMany("CompanyStructure")
                        .HasForeignKey("StructureDefinitionId");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.Consultant", b =>
                {
                    b.HasOne("WorkOffice.Domain.Entities.NHS_Referral", null)
                        .WithMany("Consultant")
                        .HasForeignKey("NHS_ReferralReferralId");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.NHS_Appointment", b =>
                {
                    b.HasOne("WorkOffice.Domain.Entities.NHS_Patient", null)
                        .WithMany("NHS_Appointment")
                        .HasForeignKey("NHS_PatientPatientId");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.NHS_Patient", b =>
                {
                    b.HasOne("WorkOffice.Domain.Entities.NHS_Diagnostic", null)
                        .WithMany("NHS_Patient")
                        .HasForeignKey("NHS_DiagnosticDiagnosticId");

                    b.HasOne("WorkOffice.Domain.Entities.NHS_Referral", null)
                        .WithMany("NHS_Patient")
                        .HasForeignKey("NHS_ReferralReferralId");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.NHS_Waitinglist", b =>
                {
                    b.HasOne("WorkOffice.Domain.Entities.NHS_Patient", null)
                        .WithMany("NHS_Waitinglist")
                        .HasForeignKey("NHS_PatientPatientId");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.Specialty", b =>
                {
                    b.HasOne("WorkOffice.Domain.Entities.NHS_Diagnostic", null)
                        .WithMany("Specialty")
                        .HasForeignKey("NHS_DiagnosticDiagnosticId");

                    b.HasOne("WorkOffice.Domain.Entities.NHS_Referral", null)
                        .WithMany("Specialty")
                        .HasForeignKey("NHS_ReferralReferralId");
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.State", b =>
                {
                    b.HasOne("WorkOffice.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.UserAccess", b =>
                {
                    b.HasOne("WorkOffice.Domain.Entities.CompanyStructure", "CompanyStructure")
                        .WithMany("UserAccess")
                        .HasForeignKey("CompanyStructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkOffice.Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("UserAccess")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.UserAccount", b =>
                {
                    b.OwnsMany("WorkOffice.Domain.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<long>("RefreshTokenId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<long>("ClientId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("text");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("text");

                            b1.Property<string>("Token")
                                .HasColumnType("text");

                            b1.Property<long>("UserAccountUserId")
                                .HasColumnType("bigint");

                            b1.HasKey("RefreshTokenId");

                            b1.HasIndex("UserAccountUserId");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner("UserAccount")
                                .HasForeignKey("UserAccountUserId");
                        });
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.UserAccountAdditionalActivity", b =>
                {
                    b.HasOne("WorkOffice.Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("UserAccountAdditionalActivity")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkOffice.Domain.Entities.UserActivity", "UserActivity")
                        .WithMany()
                        .HasForeignKey("UserActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.UserAccountRole", b =>
                {
                    b.HasOne("WorkOffice.Domain.Entities.UserAccount", "UserAccount")
                        .WithMany("UserAccountRole")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkOffice.Domain.Entities.UserRoleDefinition", "UserRoleDefinition")
                        .WithMany()
                        .HasForeignKey("UserRoleDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.UserActivity", b =>
                {
                    b.HasOne("WorkOffice.Domain.Entities.UserActivityParent", "UserActivityParent")
                        .WithMany()
                        .HasForeignKey("UserActivityParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkOffice.Domain.Entities.UserRoleActivity", b =>
                {
                    b.HasOne("WorkOffice.Domain.Entities.UserActivity", "UserActivity")
                        .WithMany()
                        .HasForeignKey("UserActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkOffice.Domain.Entities.UserRoleDefinition", "UserRoleDefinition")
                        .WithMany("UserRoleActivity")
                        .HasForeignKey("UserRoleDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
